{"version":3,"sources":["App.js","Gym.js","serviceWorker.js","index.js"],"names":["App","slots","server","UserInfo","props","React","name","setName","sso","setSso","mobile","setMobile","console","log","userinfo","localStorage","getItem","JSON","parse","queryString","window","location","search","onChange","load","className","placeholder","value","e","target","style","minWidth","onClick","setItem","stringify","url","history","pushState","pathname","ReservedList","user","update","list","setList","message","setMessage","a","fetch","res","json","data","sort","b","moment","reg_date","cancel","regIds","filter","item","checked","map","reg_id","length","method","body","errorMessage","result","onCheck","regItem","find","textAlign","Array","isArray","key","type","reg_schedule_detail","ReserveForm","reserved","loading","setLoading","date","setDate","recent","setRecent","available","setAvailable","schedule","setSchedule","setToday","getRecent","i","day","add","format","push","today","onChangeDate","radioStyle","display","height","lineHeight","submit","headers","reg_schedule_id","getAvailable","reversed","reg","status","randSSO","Math","random","toString","slice","randMobile","reserveStatus","justifyContent","Group","slot","idle","includes","Day","setDisplay","detail","then","disabled","substring","parseInt","replace","Gym","setUser","setUpdate","setReserved","maxWidth","color","marginTop","document","querySelector","select","execCommand","href","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b4e8cc77.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nfunction App() {\n\n  React.useEffect(() => {\n    window.addEventListener('message', function (e) {\n      alert('receive h5 msg:' + JSON.stringify(e))\n    })\n  }, [])\n\n  const onClick = () => {\n    if (window.ReactNativeWebview) {\n      window.ReactNativeWebView.postMessage('hi! RN')\n    } else {\n      alert('no ReactNativeWebview')\n      window.postMessage('hi! RN 123')\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\" onClick={onClick}>window.postMessage('hi! RN')</div>\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport moment from 'moment'\nimport { Radio } from 'antd';\nimport queryString from 'query-string'\nimport './Gym.css'\n\nconst slots = [\n  '06:30 - 07:50', '08:05 - 09:25', '09:40 - 11:00', '11:15 - 12:35',\n  '12:50 - 14:10', '14:25 - 15:45', '16:00 - 17:20', '17:35 - 19:00'\n]\n\nconst server = 'https://masosoft.top/gymbooking'\n\nconst Gym = props => {\n  const [user, setUser] = React.useState(null)\n  const [update, setUpdate] = React.useState(0)\n  const [reserved, setReserved] = React.useState([])\n  const onClick = () => {\n    document.querySelector(\"input[placeholder='sso'\").select()\n    document.execCommand(`copy`, false)\n    window.location.href = `${server}/gym.html`\n  }\n  return (\n    <div style={{ maxWidth: '414px' }}>\n      <h2 style={{ textAlign: 'center' }}>Gym Revervation</h2>\n      <UserInfo onChange={setUser} />\n      <ReservedList user={user} onChange={setReserved} update={update} />\n      <ReserveForm user={user} reserved={reserved} onChange={() => setUpdate(update + 1)} />\n      <div style={{ textAlign: 'center', color: 'darkblue', marginTop: '20px' }} onClick={onClick}>Copy SSO → Gym Site</div>\n      <div style={{ textAlign: 'center', marginTop: '20px' }}><a href={`${server}/gym.html`}>Go Gym Site</a></div>\n    </div>\n  )\n}\n\nconst UserInfo = props => {\n  const [name, setName] = React.useState('')\n  const [sso, setSso] = React.useState('')\n  const [mobile, setMobile] = React.useState('')\n\n  const eventSetName = e => setName(e.target.value)\n  const eventSetSso = e => setSso(e.target.value)\n  const eventSetMobile = e => setMobile(e.target.value)\n\n  const load = () => {\n    const userinfo = localStorage.getItem('userinfo') \n      ? JSON.parse(localStorage.getItem('userinfo')) \n      : queryString.parse(window.location.search)\n    userinfo.name && setName(userinfo.name)\n    userinfo.sso && setSso(userinfo.sso)\n    userinfo.mobile && setMobile(userinfo.mobile)\n    props.onChange(userinfo)\n  }\n\n  const save = () => {\n    if (sso && name && mobile) {\n      localStorage.setItem('userinfo', JSON.stringify({ name, sso, mobile }))\n      const url = queryString.stringify({ sso, name, mobile})\n      window.history.pushState(null, '', `${window.location.pathname}?${url}`)\n    }\n    props.onChange({ name, sso, mobile })\n  }\n\n  React.useEffect(() => {\n    console.log(props)\n    load()\n  }, [])\n\n  return (\n    <React.Fragment>\n      <div className=\"user\">\n        <input placeholder=\"name\" value={name} onChange={eventSetName}></input>\n        <input placeholder=\"sso\" value={sso} onChange={eventSetSso}></input>\n        <input placeholder=\"mobile\" style={{ minWidth: '115px' }} value={mobile} onChange={eventSetMobile}></input>\n        <button onClick={save}>保存</button>\n      </div>\n      <div className=\"hint\">建议保存用户信息后再收藏地址</div>\n    </React.Fragment>\n  )\n}\n\nconst ReservedList = props => {\n  const { user, onChange, update } = props\n  const [list, setList] = React.useState([])\n  const [message, setMessage] = React.useState('')\n\n  const load = async () => {\n    if (user && user.sso) {\n      const res = await fetch(`${server}/api/v1/getLastGymRegFormsBySSO?sso=${user.sso}`)\n      const { data } = await res.json()\n      data.sort((a, b) => moment(a.reg_date, 'YYYY-MM-DD') - moment(b.reg_date, 'YYYY-MM-DD'))\n      setList(data)\n      onChange(data)\n    }\n  }\n\n  const cancel = async () => {\n    const regIds = list.filter(item => item.checked).map(item => item.reg_id)\n    if (regIds.length > 0) {\n      const res = await fetch(`${server}/api/v1/cancelGymRegList`, {\n        method: 'POST',\n        body: JSON.stringify(regIds.map(reg_id => ({ reg_id })))\n      })\n      const { errorMessage, result } = await res.json()\n      setMessage(errorMessage || result)\n      load()\n    }\n  }\n\n  const onCheck = e => {\n    const regItem = list.find(item => item.reg_id === e.target.value)\n    if (regItem) {\n      regItem.checked = e.target.checked\n    }\n    setList(list)\n  }\n\n  React.useEffect(() => {\n    load()\n  }, [user, update])\n\n  return (\n    <div className=\"reserved\">\n      <h4 style={{ textAlign: 'center' }}>已预约</h4>\n      {Array.isArray(list) && list.length > 0\n        ? list.map(item => {\n          return (\n            <div key={item.reg_id} className=\"reserved-item\">\n              <div><input key={item.reg_id} type=\"checkbox\" value={item.reg_id} onChange={onCheck} checked={item.checked}></input></div>\n              <div>Date: {item.reg_date}</div>\n              <div>Time: {item.reg_schedule_detail}</div>\n            </div>\n          )\n        })\n        : <div>无预约</div>\n      }\n      <button onClick={cancel}>取消预约</button>\n      <div className=\"message\">{message}</div>\n    </div>\n  )\n}\n\nconst ReserveForm = props => {\n  const { user, reserved, onChange } = props\n  const [loading, setLoading] = React.useState(false)\n  const [posting, setPosting] = React.useState(false)\n  const [date, setDate] = React.useState('')\n  const [recent, setRecent] = React.useState([])\n  const [available, setAvailable] = React.useState({})\n  const [message, setMessage] = React.useState('')\n  const [schedule, setSchedule] = React.useState(1)\n  const next_days = 5\n\n  React.useEffect(() => {\n    setToday()\n    getRecent()\n  }, [])\n\n  const getRecent = () => {\n    for (let i = 0; i < next_days; i++) {\n      const day = moment().add(i, 'days').format('YYYY-MM-DD')\n      recent.push(day)\n      setRecent(recent)\n    }\n  }\n\n  const setToday = () => {\n    const today = moment().format('YYYY-MM-DD')\n    console.log('setToday', today)\n    setDate(today)\n  }\n\n  const onChangeSchedule = e => {\n    setSchedule(e.target.value)\n  }\n\n  const onChangeDate = e => {\n    console.log(e.target.value)\n    setDate(e.target.value)\n  }\n\n  const radioStyle = {\n    display: 'block',\n    height: '30px',\n    lineHeight: '30px',\n  };\n\n  const submit = async () => {\n    if (user && user.sso && user.name && user.mobile) {\n      const res = await fetch(`${server}/api/v1/createGymRegForm`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          reg_date: date,\n          reg_schedule_id: schedule,\n          \"reg_ssoid\": user.sso,\n          \"reg_username\": user.name,\n          \"reg_mobile\": user.mobile,\n          \"reg_status\": true\n        })\n      })\n\n      const { errorMessage, result } = await res.json()\n      setMessage(errorMessage || result)\n      if (result === 'done') {\n        onChange()\n      }\n    }\n  }\n\n  const getAvailable = async () => {\n    setLoading(true)\n    available[date] = []\n    setAvailable(available)\n\n    const cancel = async (sso) => {\n      let res = await fetch(`${server}/api/v1/getLastGymRegFormsBySSO?sso=${sso}`)\n      let { data } = await res.json()\n      let reversed = data.find(item => item.reg_date === date)\n      if (reversed?.reg_id) {\n        res = await fetch(`${server}/api/v1/cancelGymRegList`, {\n          method: 'POST',\n          body: JSON.stringify([{ reg_id: reversed?.reg_id }])\n        })\n        await res.json()\n      }\n    }\n\n    const reg = async (reg_schedule_id, status) => {\n      const randSSO = \"21\" + Math.random().toString().slice(-7)\n      const res = await fetch(`${server}/api/v1/createGymRegForm`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          reg_date: date,\n          reg_schedule_id,\n          \"reg_ssoid\": randSSO,\n          \"reg_username\": \"   \",\n          \"reg_mobile\": randMobile(),\n          \"reg_status\": true\n        })\n      })\n\n      const { errorMessage, result } = await res.json()\n      if (result === 'done') {\n        status.push(reg_schedule_id)\n        await cancel(randSSO)\n      }\n\n      if (reg_schedule_id < 8) {\n        await reg(reg_schedule_id + 1, status)\n      }\n    }\n    const reserveStatus = []\n    await reg(1, reserveStatus)\n    available[date] = reserveStatus\n\n    setAvailable(available)\n\n    setLoading(false)\n  }\n\n  const quickReg = async () => {\n    setPosting(true)\n    const reg = async (day, reg_schedule_id) => {\n      const res = await fetch(`${server}/api/v1/createGymRegForm`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          reg_date: day,\n          reg_schedule_id: reg_schedule_id.toString(),\n          \"reg_ssoid\": user.sso,\n          \"reg_username\": user.name,\n          \"reg_mobile\": user.mobile,\n          \"reg_status\": true\n        })\n      })\n\n      const { errorMessage, result } = await res.json()\n      if (result === 'done') {\n        return true\n      } else if (reg_schedule_id < 8) {\n        await reg(day, reg_schedule_id + 1)\n      }\n    }\n\n    for (const day of recent) {\n      const status = localStorage.getItem(`gym_${day}`)\n      if (!reserved.find(item => item.reg_date === day) && status === \"true\") {\n        const success = await reg(day, 1)\n        if (success) {\n          window.location.reload()\n          break\n        }\n      }\n    }\n    setPosting(true)\n  }\n\n  return (\n    <div className=\"reserve-form\">\n      <h4 style={{ textAlign: 'center' }}>进行预约</h4>\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        <div>\n          <div>日期: <input type=\"date\" value={date} onChange={onChangeDate} style={{ display: 'inline-block' }}></input></div>\n          <Radio.Group onChange={onChangeDate} value={date}>\n            {recent.map(day => <Day key={day} value={day} style={radioStyle} reserved={reserved} />)}\n          </Radio.Group>\n        </div>\n        <div>\n          <div style={{ height: '26px', lineHeight: '26px' }}>时段:\n            {loading\n              ? ' 查询中...'\n              : <button onClick={getAvailable}>刷新可用</button>\n            }\n          </div>\n          <Radio.Group onChange={onChangeSchedule} value={schedule}>\n            {slots.map((slot, i) => {\n              const idle = available[date]\n                ? available[date].includes(i + 1) ? '可用' : ''\n                : ''\n              return <Radio key={slot} style={radioStyle} value={i + 1}>{slot} {idle}</Radio>\n            })}\n          </Radio.Group></div>\n      </div>\n      <div style={{ display: 'flex', justifyContent: 'space-around' }}>\n        {/* {posting ? '执行中...' : <button onClick={quickReg} style={{ display: 'block' }}>快速预约</button>} */}\n        <button onClick={submit} style={{ display: 'block' }}>预约</button>\n      </div>\n      <div className=\"message\">{message}</div>\n    </div>\n  )\n}\n\nconst Day = props => {\n  const { value, style, reserved: list } = props\n  const [display, setDisplay] = React.useState(\"false\")\n  const reserved = list.find(item => item.reg_date === value)\n  const detail = reserved?.reg_schedule_detail ? `(${reserved?.reg_schedule_detail})` : ''\n\n  React.useEffect(() => {\n    fetch(`${server}/api/v1/checkDate?date=${value}`)\n      .then(res => res.json())\n      .then(({ result }) => {\n        if (result === 'ok') {\n          setDisplay(\"true\")\n        } else {\n          setDisplay(\"false\")\n        }\n      })\n  }, [value])\n\n  return <Radio style={style} disabled={display === \"false\"} value={value}>{value.substring(5, value.length)} {detail}</Radio>\n}\n\nfunction randMobile() {\n  const headerNums = new Array(\"139\", \"138\", \"137\", \"136\", \"135\", \"134\", \"159\", \"158\", \"157\", \"150\", \"151\", \"152\", \"188\", \"187\", \"182\", \"183\", \"184\", \"178\", \"130\", \"131\", \"132\", \"156\", \"155\", \"186\", \"185\", \"176\", \"133\", \"153\", \"189\", \"180\", \"181\", \"177\");\n  const headerNum = headerNums[parseInt(Math.random() * 10, 10)]\n  const bodyNum = Math.random().toString().replace('0.', '').slice(0, 8)\n  return headerNum + bodyNum\n}\n\nexport default Gym","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Gym from './Gym';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <Gym />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}